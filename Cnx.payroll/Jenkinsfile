def docker_images = ["my-registry:5000/cnx.earninganddeductions.unittest:B${BUILD_NUMBER}",
"my-registry:5000/cnx.notification.unittest:B${BUILD_NUMBER}"]

def get_stages(docker_image) {
	stages = {
				stage("Print image name") {
						echo 'Running in ${docker_image}'
				}

				stage("Publish UT Report") {
					containerID = sh (
						script: "docker run -d ${docker_image}", returnStdout: true
					).trim()
					echo "Container ID is ==> ${containerID}"
					sh "docker cp ${containerID}:/TestResults/ TestResults"
					sh "docker stop ${containerID}"
					sh "docker rm ${containerID}"
					step([$class: 'MSTestPublisher', failOnError: false, testResultsFile: 'TestResults/test_results*.xml'])
				}

				stage("Integration Test") {
					switch(docker_image) {
						default:
							sh 'sleep 10'
							sh 'echo this is integration test stage'
					}
				}
	}

	return stages
}

node('docker') {

    stage ('Checkout') {
		checkout scm
	}       

    stage ('Build & UnitTest') {
		def cd = "${env.WORKSPACE}"
		echo cd
		sh "docker-compose -f Cnx.payroll/docker-compose-ci-build.yml build"
		sh "docker-compose -f Cnx.payroll/docker-compose-unit-tests.yml build"
		//sh "docker build -t cnxearninganddeductions:test-B${BUILD_NUMBER} -f Cnx.payroll/Dockerfile.Integration ."
	}	
    
    //stage 'Publish UT Reports'
        
    //    containerID = sh (
    //        script: "docker run -d cnxearninganddeductions_unit_tests:B${BUILD_NUMBER}", 
    //    returnStdout: true
    //    ).trim()
    //    echo "Container ID is ==> ${containerID}"
    //    sh "docker cp ${containerID}:/TestResults/ TestResults"
    //    sh "docker stop ${containerID}"
    //    sh "docker rm ${containerID}"
    //   step([$class: 'MSTestPublisher', failOnError: false, testResultsFile: 'TestResults/test_results*.xml'])    
      
    //stage 'Integration Test'
         // sh "docker-compose -f docker-compose.integration.yml up"
    //     sh "docker-compose -f Cnx.payroll/docker-compose.integration.yml up --force-recreate --abort-on-container-exit"
    //     sh "docker-compose -f Cnx.payroll/docker-compose.integration.yml down -v"

    

	// stage("Deploy to k8s")
    //     sh "sed -i 's/BUILD_NUMBER/B${BUILD_NUMBER}/g' mydeploy.yaml"
	// 	sh "kubectl apply -f mydeploy.yaml"
	// 	sh "kubectl apply -f myservice.yaml"
    
}

	def stages = [:]

	for (int i = 0; i < docker_images.size(); i++) {
		def docker_image = docker_images[i]
		echo "Currently executing docker image"
		echo docker_image
		stages[docker_image] = get_stages(docker_image)
	}

	node('docker') {
		parallel stages
	}
	
	node('docker') {
		stage("Push Image") {
			sh "docker push my-registry:5000/cnx.earninganddeductions.api:B${BUILD_NUMBER}"
			sh "docker push my-registry:5000/cnx.notification.api:B${BUILD_NUMBER}"
		}
	}
