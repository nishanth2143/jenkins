def docker_images = ["cnx.earninganddeductions.unittest:B${BUILD_NUMBER}", "cnx.notification.unittest:B${BUILD_NUMBER}"]

def get_stages(docker_image) {
	stages = {
				stage("Print image name") {
						echo "Running in ${docker_image}"
				}

				node('docker'){
					stage("Publish UT Report") {
						containerID = sh (
							script: "docker run -d ${docker_image}", returnStdout: true
						).trim()
						echo "Container ID is ==> ${containerID}"
						sh "docker cp ${containerID}:/TestResults/ TestResults"
						sh "docker stop ${containerID}"
						sh "docker rm ${containerID}"
						step([$class: 'MSTestPublisher', failOnError: false, testResultsFile: 'TestResults/test_results*.xml'])
						sh "rm -r TestResults"
					}

					stage("Integration Test") {
						switch(docker_image) {
							default:
								sh 'sleep 10'
								sh 'echo this is integration test stage'
						}
					}
				}
	}

	return stages
}

node('docker') {

    stage ('Checkout') {
		checkout scm
	}       

    stage ('Build & UnitTest') {
		sh "docker-compose -f Cnx.payroll/docker-compose-ci-build.yml build --no-cache"
		sh "docker-compose -f Cnx.payroll/docker-compose-unit-tests.yml build --no-cache"
	}
    
}
	def stages = [:]

	for (int i = 0; i < docker_images.size(); i++) {
		def docker_image = docker_images[i]
		echo "Currently executing docker image"
		echo docker_image
		stages[docker_image] = get_stages(docker_image)
	}

	parallel stages
	
node('docker') {
	stage("Push Image") {
		def formattedDate = new Date().format("ddMMyyyy")
		sh "docker tag cnx.earninganddeductions.api:B${BUILD_NUMBER} my-registry:5000/cnx.earninganddeductions.api.${formattedDate}.${BUILD_NUMBER}"
		sh "docker push my-registry:5000/cnx.earninganddeductions.api.${formattedDate}.${BUILD_NUMBER}"
		sh "docker tag cnx.notification.api:B${BUILD_NUMBER} my-registry:5000/cnx.notification.api.${formattedDate}.${BUILD_NUMBER}"
		sh "docker push my-registry:5000/cnx.notification.api.${formattedDate}.${BUILD_NUMBER}"
	}
}
